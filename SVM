{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1-uNABY_7wvdPbh0XdDyyUgAAT3rilC-a","authorship_tag":"ABX9TyP72LEc0L5bDlEQoQGUmqbI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"4UX9OAq5gE7X","executionInfo":{"status":"ok","timestamp":1711264275261,"user_tz":-420,"elapsed":3396,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"outputs":[],"source":["import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","from sklearn.svm import SVC\n","from sklearn.metrics import classification_report, confusion_matrix,accuracy_score,precision_score, recall_score, f1_score\n","import matplotlib.pyplot as plt\n","import seaborn as sn\n","import numpy as np"]},{"cell_type":"code","source":["import keras\n","print(keras.__version__)\n","from keras.preprocessing import text, sequence"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pz1d5Y3hT5Qy","executionInfo":{"status":"ok","timestamp":1711264516301,"user_tz":-420,"elapsed":4790,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"11ef073d-fef6-42e2-86a0-e3bf6c22303b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["2.15.0\n"]}]},{"cell_type":"code","source":["train = pd.read_csv('/content/drive/MyDrive/Coding/AERA/Dataset/train.csv')\n","test = pd.read_csv('/content/drive/MyDrive/Coding/AERA/Dataset/test.csv')\n","val = pd.read_csv('/content/drive/MyDrive/Coding/AERA/Dataset/val.csv')"],"metadata":{"id":"x-6xWW1hhOYF","executionInfo":{"status":"ok","timestamp":1711264299779,"user_tz":-420,"elapsed":5536,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["X_train = train['normalize']\n","y_train = train['label'].values\n","\n","X_val = val['normalize']\n","y_val = val['label'].values\n","\n","X_test = test['normalize']\n","y_test = test['label'].values"],"metadata":{"id":"VsheoHYYgN_9","executionInfo":{"status":"ok","timestamp":1711264299780,"user_tz":-420,"elapsed":5,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# --------------TRICH XUAT DAC TRUNG -------------------------\n","def pre_process_features(X, y, tokenized = True, lowercased = True):\n","    for idx, ele in enumerate(X):\n","        if not ele:\n","            np.delete(X, idx)\n","            np.delete(y, idx)\n","    return X, y"],"metadata":{"id":"KS5XaCCY3KWb","executionInfo":{"status":"ok","timestamp":1711264299780,"user_tz":-420,"elapsed":5,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["train_X, train_y = pre_process_features(X_train, y_train, tokenized=True, lowercased = True)\n","dev_X, dev_y = pre_process_features(X_val, y_val, tokenized=True, lowercased = True)\n","test_X, test_y = pre_process_features(X_test, y_test, tokenized=True, lowercased = True)\n","\n","#EMBEDDING_FILE = '/content/drive/MyDrive/MachineLearning/word2vec_vi_syllables_300dims.txt'\n","EMBEDDING_FILE = '/content/drive/MyDrive/Coding/AERA/word2vec_vi_syllables_100dims.txt'\n","MODEL_FILE = '/content/drive/MyDrive/Coding/AERA/TextCNN/Text_CNN_Word.h5'\n","\n","def make_featues(X, y, tokenizer, is_one_hot_label=True):\n","    X = tokenizer.texts_to_sequences(X)\n","    #X = sequence.pad_sequences(X, maxlen=sequence_length)\n","    X = pad_sequences(X, maxlen=sequence_length)\n","    if is_one_hot_label:\n","        y = to_categorical(y, num_classes=3)\n","\n","    return X, y\n","\n","vocabulary_size = 10000\n","sequence_length = 100\n","\n","embedding_dim = 100\n","batch_size = 256\n","epochs = 40\n","drop = 0.5\n","\n","filter_sizes = [2,3,5]\n","num_filters = 32"],"metadata":{"id":"v8ZB8mNJ3Hhj","executionInfo":{"status":"ok","timestamp":1711264299781,"user_tz":-420,"elapsed":5,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# --------------LOAD WORD EMBEDDING -------------------------\n","embeddings_index = {}\n","with open(EMBEDDING_FILE, encoding='utf8') as f:\n","    for line in f:\n","        values = line.rstrip().rsplit(' ')\n","        word = values[0]\n","        coefs = np.asarray(values[1:], dtype='float32')\n","        embeddings_index[word] = coefs\n","\n","\n","tokenizer = text.Tokenizer(lower=False, filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^`{|}~\\t\\n')\n","tokenizer.fit_on_texts(train_X)"],"metadata":{"id":"XF7Xb6-53Mpl","executionInfo":{"status":"ok","timestamp":1711264552973,"user_tz":-420,"elapsed":34333,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["word_index = tokenizer.word_index\n","# num_words = min(vocabulary_size, len(word_index) + 1)\n","num_words = len(word_index) + 1\n","embedding_matrix = np.zeros((num_words, embedding_dim))\n","\n","for word, i in word_index.items():\n","    if i >= vocabulary_size:\n","        continue\n","\n","    embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector"],"metadata":{"id":"HV8ipTfB3O4R","executionInfo":{"status":"ok","timestamp":1711264576552,"user_tz":-420,"elapsed":545,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["import tensorflow\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from keras.utils import to_categorical"],"metadata":{"id":"r5ZvS35rUdES","executionInfo":{"status":"ok","timestamp":1711264631248,"user_tz":-420,"elapsed":503,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Make features\n","train_X, train_y = make_featues(train_X, train_y, tokenizer)\n","dev_X, dev_y = make_featues(dev_X, dev_y, tokenizer)\n","test_X, test_y = make_featues(test_X, test_y, tokenizer, is_one_hot_label=False)"],"metadata":{"id":"WY5JcNu53dqC","colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"status":"error","timestamp":1711265166603,"user_tz":-420,"elapsed":548,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"6fa41dc5-e1d2-4328-8be6-c8be3433922d"},"execution_count":19,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute 'translate'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-1e6a2aa42819>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Make features\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtrain_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_featues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdev_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdev_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_featues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdev_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdev_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtest_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_featues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_one_hot_label\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-5-dcf139aeb2ce>\u001b[0m in \u001b[0;36mmake_featues\u001b[0;34m(X, y, tokenizer, is_one_hot_label)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmake_featues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_one_hot_label\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtexts_to_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0;31m#X = sequence.pad_sequences(X, maxlen=sequence_length)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpad_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlen\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msequence_length\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/text.py\u001b[0m in \u001b[0;36mtexts_to_sequences\u001b[0;34m(self, texts)\u001b[0m\n\u001b[1;32m    355\u001b[0m             \u001b[0mA\u001b[0m \u001b[0mlist\u001b[0m \u001b[0mof\u001b[0m \u001b[0msequences\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m         \"\"\"\n\u001b[0;32m--> 357\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtexts_to_sequences_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtexts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    358\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    359\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtexts_to_sequences_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtexts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/text.py\u001b[0m in \u001b[0;36mtexts_to_sequences_generator\u001b[0;34m(self, texts)\u001b[0m\n\u001b[1;32m    384\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manalyzer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 386\u001b[0;31m                     seq = text_to_word_sequence(\n\u001b[0m\u001b[1;32m    387\u001b[0m                         \u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m                         \u001b[0mfilters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilters\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/preprocessing/text.py\u001b[0m in \u001b[0;36mtext_to_word_sequence\u001b[0;34m(input_text, filters, lower, split)\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[0mtranslate_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0msplit\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfilters\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0mtranslate_map\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaketrans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtranslate_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0minput_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput_text\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranslate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtranslate_map\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0mseq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput_text\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'translate'"]}]},{"cell_type":"code","source":["clf = SVC(kernel='linear')"],"metadata":{"id":"rW1XLzyySaX1","executionInfo":{"status":"ok","timestamp":1711264681728,"user_tz":-420,"elapsed":341,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["clf.fit(train_X, train_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"id":"rG0H56pcSpr-","executionInfo":{"status":"error","timestamp":1711264683078,"user_tz":-420,"elapsed":9,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"5f331937-d0d0-4d75-efc7-13705d78e673"},"execution_count":16,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"y should be a 1d array, got an array of shape (33943, 3) instead.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-c8f36cd543d6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    190\u001b[0m             \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 192\u001b[0;31m             X, y = self._validate_data(\n\u001b[0m\u001b[1;32m    193\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m                 \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    582\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 584\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    585\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    586\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1120\u001b[0m     )\n\u001b[1;32m   1121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1122\u001b[0;31m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_numeric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1124\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_check_y\u001b[0;34m(y, multi_output, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1141\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1142\u001b[0m         \u001b[0mestimator_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_estimator_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1143\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolumn_or_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwarn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1144\u001b[0m         \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1145\u001b[0m         \u001b[0m_ensure_no_complex_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcolumn_or_1d\u001b[0;34m(y, dtype, warn)\u001b[0m\n\u001b[1;32m   1200\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_asarray_with_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"C\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1202\u001b[0;31m     raise ValueError(\n\u001b[0m\u001b[1;32m   1203\u001b[0m         \u001b[0;34m\"y should be a 1d array, got an array of shape {} instead.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1204\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: y should be a 1d array, got an array of shape (33943, 3) instead."]}]},{"cell_type":"code","source":["y_pred_val = pipeline.predict(dev_X)"],"metadata":{"id":"M1sz6cF68A56"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(dev_y, y_pred_val))"],"metadata":{"id":"Rgenb1Ah8A3U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711224722622,"user_tz":-420,"elapsed":5,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"9902f388-e6df-4ad8-8811-b16aede9b602"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.78      0.79      0.79       251\n","           1       0.49      0.21      0.29       163\n","           2       0.97      0.99      0.98      4435\n","\n","    accuracy                           0.96      4849\n","   macro avg       0.75      0.66      0.69      4849\n","weighted avg       0.95      0.96      0.95      4849\n","\n"]}]},{"cell_type":"code","source":["y_pred = pipeline.predict(X_test)"],"metadata":{"id":"1EaXTGJ81UCG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ki5pFCa1fXR","executionInfo":{"status":"ok","timestamp":1711223182399,"user_tz":-420,"elapsed":24,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"7fd7c4b7-a550-4c97-b263-4e31e4f764d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.83      0.79      0.81       410\n","           1       0.52      0.23      0.32       270\n","           2       0.98      0.99      0.99      9019\n","\n","    accuracy                           0.96      9699\n","   macro avg       0.78      0.67      0.70      9699\n","weighted avg       0.96      0.96      0.96      9699\n","\n"]}]},{"cell_type":"code","source":["cf1 = confusion_matrix(y_test, y_pred)\n","print(cf1)\n","\n","evaluation = f1_score(y_test, y_pred, average='micro')\n","\n","print(\"F1 - micro: \" + str(evaluation))\n","\n","evaluation = f1_score(y_test, y_pred, average='macro')\n","print(\"F1 - macro: \" + str(evaluation))\n","\n","evaluation = accuracy_score(y_test, y_pred)\n","print(\"Accuracy: \" + str(evaluation))\n","\n","df_cm1 = pd.DataFrame(cf1, index = [\"negative\",\"neutral\",\"positive\"],\n","                  columns = [\"negative\",\"neutral\",\"positive\"])\n","plt.clf()\n","sn.heatmap(df_cm1, annot=True, cmap=\"Greys\",fmt='g', cbar=True, annot_kws={\"size\": 30})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":552},"id":"qF9klKVb1hUK","executionInfo":{"status":"ok","timestamp":1711223183113,"user_tz":-420,"elapsed":733,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"acc409c3-2b8b-4fce-aeaf-26967be0f651"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 325   32   53]\n"," [  45   61  164]\n"," [  22   24 8973]]\n","F1 - micro: 0.9649448396741932\n","F1 - macro: 0.7037586287970488\n","Accuracy: 0.9649448396741932\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":35},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"Wti0nIy41mm0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pipeline2 = Pipeline([\n","    ('count', CountVectorizer()),  # Feature extraction using TF-IDF\n","    ('classifier', SVC(C = 1000.0,gamma = 0.001, kernel = \"rbf\"))  # SVM\n","], verbose = 1)"],"metadata":{"id":"XUdyIUID6QMr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pipeline2.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":161},"executionInfo":{"status":"ok","timestamp":1711225083154,"user_tz":-420,"elapsed":225071,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"66ab920a-f53c-4845-ffcb-e797062e370b","id":"6Q71-VyZ6QMs"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[Pipeline] ............. (step 1 of 2) Processing count, total=   3.2s\n","[Pipeline] ........ (step 2 of 2) Processing classifier, total= 3.7min\n"]},{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('count', CountVectorizer()),\n","                ('classifier', SVC(C=1000.0, gamma=0.001))],\n","         verbose=1)"],"text/html":["<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;count&#x27;, CountVectorizer()),\n","                (&#x27;classifier&#x27;, SVC(C=1000.0, gamma=0.001))],\n","         verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;count&#x27;, CountVectorizer()),\n","                (&#x27;classifier&#x27;, SVC(C=1000.0, gamma=0.001))],\n","         verbose=1)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CountVectorizer</label><div class=\"sk-toggleable__content\"><pre>CountVectorizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=1000.0, gamma=0.001)</pre></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["y_pred_val_2 = pipeline2.predict(X_val)"],"metadata":{"id":"iNJQbp7-8YbK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_val, y_pred_val_2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711224783176,"user_tz":-420,"elapsed":7,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"f29fab1b-12b9-4234-b342-d8ee80381276","id":"BL5vqLuF8YbK"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.74      0.72      0.73       251\n","           1       0.33      0.29      0.31       163\n","           2       0.98      0.98      0.98      4435\n","\n","    accuracy                           0.95      4849\n","   macro avg       0.68      0.67      0.67      4849\n","weighted avg       0.94      0.95      0.94      4849\n","\n"]}]},{"cell_type":"code","source":["y_pred2 = pipeline2.predict(X_test)"],"metadata":{"id":"UBX3q38f6QMs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_pred2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711224500500,"user_tz":-420,"elapsed":12,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"5f85875f-660c-4974-e625-3e431b76779f","id":"-6hTNvjb6QMt"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.76      0.78      0.77       410\n","           1       0.34      0.28      0.31       270\n","           2       0.98      0.98      0.98      9019\n","\n","    accuracy                           0.96      9699\n","   macro avg       0.69      0.68      0.69      9699\n","weighted avg       0.95      0.96      0.95      9699\n","\n"]}]},{"cell_type":"code","source":["cf1 = confusion_matrix(y_test, y_pred2)\n","print(cf1)\n","\n","evaluation = f1_score(y_test, y_pred2, average='micro')\n","\n","print(\"F1 - micro: \" + str(evaluation))\n","\n","evaluation = f1_score(y_test, y_pred2, average='macro')\n","print(\"F1 - macro: \" + str(evaluation))\n","\n","evaluation = accuracy_score(y_test, y_pred2)\n","print(\"Accuracy: \" + str(evaluation))\n","\n","df_cm1 = pd.DataFrame(cf1, index = [\"negative\",\"neutral\",\"positive\"],\n","                  columns = [\"negative\",\"neutral\",\"positive\"])\n","plt.clf()\n","sn.heatmap(df_cm1, annot=True, cmap=\"Greys\",fmt='g', cbar=True, annot_kws={\"size\": 30})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":552},"executionInfo":{"status":"ok","timestamp":1711224501184,"user_tz":-420,"elapsed":692,"user":{"displayName":"minhhuy.storage 1","userId":"09489387504380912194"}},"outputId":"0474fced-1ea8-4761-f38d-1831ff68aa19","id":"LOpGne8m6QMt"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 321   40   49]\n"," [  54   75  141]\n"," [  47  103 8869]]\n","F1 - micro: 0.9552531188782348\n","F1 - macro: 0.6867347581223041\n","Accuracy: 0.9552531188782348\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":40},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"GeZlOvTQ6f6n"},"execution_count":null,"outputs":[]}]}